// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/ether8021x.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Dot1XManager_ConfigureInterface_FullMethodName = "/ether8021x.Dot1xManager/ConfigureInterface"
	Dot1XManager_GetStatus_FullMethodName          = "/ether8021x.Dot1xManager/GetStatus"
	Dot1XManager_StreamStatus_FullMethodName       = "/ether8021x.Dot1xManager/StreamStatus"
	Dot1XManager_Disconnect_FullMethodName         = "/ether8021x.Dot1xManager/Disconnect"
)

// Dot1XManagerClient is the client API for Dot1XManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Dot1XManagerClient interface {
	ConfigureInterface(ctx context.Context, in *Dot1XConfigRequest, opts ...grpc.CallOption) (*Dot1XConfigResponse, error)
	GetStatus(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (*InterfaceStatus, error)
	StreamStatus(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InterfaceStatus], error)
	Disconnect(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
}

type dot1XManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewDot1XManagerClient(cc grpc.ClientConnInterface) Dot1XManagerClient {
	return &dot1XManagerClient{cc}
}

func (c *dot1XManagerClient) ConfigureInterface(ctx context.Context, in *Dot1XConfigRequest, opts ...grpc.CallOption) (*Dot1XConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Dot1XConfigResponse)
	err := c.cc.Invoke(ctx, Dot1XManager_ConfigureInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dot1XManagerClient) GetStatus(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (*InterfaceStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InterfaceStatus)
	err := c.cc.Invoke(ctx, Dot1XManager_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dot1XManagerClient) StreamStatus(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InterfaceStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Dot1XManager_ServiceDesc.Streams[0], Dot1XManager_StreamStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InterfaceRequest, InterfaceStatus]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Dot1XManager_StreamStatusClient = grpc.ServerStreamingClient[InterfaceStatus]

func (c *dot1XManagerClient) Disconnect(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, Dot1XManager_Disconnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Dot1XManagerServer is the server API for Dot1XManager service.
// All implementations must embed UnimplementedDot1XManagerServer
// for forward compatibility.
type Dot1XManagerServer interface {
	ConfigureInterface(context.Context, *Dot1XConfigRequest) (*Dot1XConfigResponse, error)
	GetStatus(context.Context, *InterfaceRequest) (*InterfaceStatus, error)
	StreamStatus(*InterfaceRequest, grpc.ServerStreamingServer[InterfaceStatus]) error
	Disconnect(context.Context, *InterfaceRequest) (*DisconnectResponse, error)
	mustEmbedUnimplementedDot1XManagerServer()
}

// UnimplementedDot1XManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDot1XManagerServer struct{}

func (UnimplementedDot1XManagerServer) ConfigureInterface(context.Context, *Dot1XConfigRequest) (*Dot1XConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureInterface not implemented")
}
func (UnimplementedDot1XManagerServer) GetStatus(context.Context, *InterfaceRequest) (*InterfaceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedDot1XManagerServer) StreamStatus(*InterfaceRequest, grpc.ServerStreamingServer[InterfaceStatus]) error {
	return status.Errorf(codes.Unimplemented, "method StreamStatus not implemented")
}
func (UnimplementedDot1XManagerServer) Disconnect(context.Context, *InterfaceRequest) (*DisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedDot1XManagerServer) mustEmbedUnimplementedDot1XManagerServer() {}
func (UnimplementedDot1XManagerServer) testEmbeddedByValue()                      {}

// UnsafeDot1XManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Dot1XManagerServer will
// result in compilation errors.
type UnsafeDot1XManagerServer interface {
	mustEmbedUnimplementedDot1XManagerServer()
}

func RegisterDot1XManagerServer(s grpc.ServiceRegistrar, srv Dot1XManagerServer) {
	// If the following call pancis, it indicates UnimplementedDot1XManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dot1XManager_ServiceDesc, srv)
}

func _Dot1XManager_ConfigureInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dot1XConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Dot1XManagerServer).ConfigureInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dot1XManager_ConfigureInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Dot1XManagerServer).ConfigureInterface(ctx, req.(*Dot1XConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dot1XManager_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Dot1XManagerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dot1XManager_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Dot1XManagerServer).GetStatus(ctx, req.(*InterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dot1XManager_StreamStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Dot1XManagerServer).StreamStatus(m, &grpc.GenericServerStream[InterfaceRequest, InterfaceStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Dot1XManager_StreamStatusServer = grpc.ServerStreamingServer[InterfaceStatus]

func _Dot1XManager_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Dot1XManagerServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dot1XManager_Disconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Dot1XManagerServer).Disconnect(ctx, req.(*InterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dot1XManager_ServiceDesc is the grpc.ServiceDesc for Dot1XManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dot1XManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ether8021x.Dot1xManager",
	HandlerType: (*Dot1XManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureInterface",
			Handler:    _Dot1XManager_ConfigureInterface_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Dot1XManager_GetStatus_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Dot1XManager_Disconnect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStatus",
			Handler:       _Dot1XManager_StreamStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ether8021x.proto",
}
